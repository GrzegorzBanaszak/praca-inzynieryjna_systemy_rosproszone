services:
  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports: ["2181:2181"]

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    restart: unless-stopped
    environment:
      # tryb KRaft (bez Zookeepera)
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1

      # listenery
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092

      # kontroler
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093

      # miÄ™dzy brokerami
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT

      # opcjonalnie
      - KAFKA_CFG_NUM_PARTITIONS=1
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
      - "9093:9093"
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server localhost:9092 > /dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 5

  orderdb:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: OrderDb
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U postgres"]
      interval: 10s
      retries: 5
    ports: ["5432:5432"]
    volumes:
      - orderdb-data:/var/lib/postgresql/data

  orderservice:
    build:
      context: ../src/OrderService
      dockerfile: Dockerfile
    image: orderservice:latest
    depends_on:
      zookeeper:
        condition: service_started
      kafka:
        condition: service_healthy
      orderdb:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80 
      - ConnectionStrings__DefaultConnection=Host=orderdb;Port=5432;Database=OrderDb;Username=postgres;Password=postgres
      - KafkaSettings__BootstrapServers=kafka:9092
      - KafkaSettings__Topic=orders
    ports:
      - "5003:80"
    healthcheck:
      test: ["CMD","curl","-f","http://localhost:80/healthz"]
      interval: 10s
      retries: 3

volumes:
  orderdb-data: