version: '3.8'

services:
  ## Zookeeper for Kafka (KRaft can run without ZK, but some images still require it)
  zookeeper:
    image: bitnami/zookeeper:latest
    restart: unless-stopped
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - '2181:2181'

  ## Kafka in KRaft mode
  kafka:
    image: bitnami/kafka:latest
    restart: unless-stopped
    depends_on:
      - zookeeper
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_NUM_PARTITIONS=1
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    ports:
      - '9092:9092'
      - '9093:9093'
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server localhost:9092 >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 5

  ## MongoDB for ProductService
  mongo:
    image: mongo:6.0
    restart: unless-stopped
    ports:
      - '27017:27017'
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval \"db.adminCommand('ping')\""]
      interval: 10s
      timeout: 5s
      retries: 5

  ## ProductService
  productservice:
    build:
      context: ../src/ProductService
      dockerfile: Dockerfile
    image: productservice:latest
    restart: unless-stopped
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80 
      - MongoDbSettings__ConnectionString=mongodb://mongo:27017
      - MongoDbSettings__DatabaseName=ProductDb
      - MongoDbSettings__CollectionName=Products
    ports:
      - '5001:80'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/healthz"]
      interval: 10s
      timeout: 3s
      retries: 3

  ## PostgreSQL for UserService
  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: UserDb
    ports:
      - '5432:5432'
    volumes:
      - user-pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  ## UserService
  userservice:
    build:
      context: ../src/UserService
      dockerfile: Dockerfile
    image: userservice:latest
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80 
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=UserDb;Username=postgres;Password=postgres
      - JwtSettings__Key=f3Pz7dX9sL2nM6aQ1vT4rY8kU0iO5pE9jH2gB7hK4cV6xZ1bN3mL8qW2eR5tY0u
      - JwtSettings__Issuer=MyApp
      - JwtSettings__Audience=MyAppUsers
      - JwtSettings__ExpiresInMinutes=60
    ports:
      - '5002:80'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/healthz"]
      interval: 10s
      timeout: 3s
      retries: 3

  ## PostgreSQL for OrderService
  orderdb:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: OrderDb
    ports:
      - '5433:5432'
    volumes:
      - orderdb-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  ## OrderService
  orderservice:
    build:
      context: ../src/OrderService
      dockerfile: Dockerfile
    image: orderservice:latest
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_started
      kafka:
        condition: service_healthy
      orderdb:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=orderdb;Port=5432;Database=OrderDb;Username=postgres;Password=postgres
      - KafkaSettings__BootstrapServers=kafka:9092
      - KafkaSettings__Topic=orders
      - JwtSettings__Key=f3Pz7dX9sL2nM6aQ1vT4rY8kU0iO5pE9jH2gB7hK4cV6xZ1bN3mL8qW2eR5tY0u
      - JwtSettings__Issuer=MyApp
      - JwtSettings__Audience=MyAppUsers
      - JwtSettings__ExpiresInMinutes=60
    ports:
      - '5003:80'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/healthz"]
      interval: 10s
      timeout: 3s
      retries: 3

  ## NotificationService
  notificationservice:
    build:
      context: ../src/NotificationService
      dockerfile: Dockerfile
    image: notificationservice:latest
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - KafkaSettings__BootstrapServers=kafka:9092
      - KafkaSettings__Topic=orders
      - KafkaSettings__GroupId=notification-service-group
      - SmtpSettings__Host=smtp.example.com
      - SmtpSettings__Port=587
      - SmtpSettings__User=noreply@example.com
      - SmtpSettings__Pass=SuperTajneHaslo
    ports:
      - '5004:80'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/healthz"]
      interval: 10s
      timeout: 3s
      retries: 3

  ## Kafdrop UI
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    restart: unless-stopped
    ports:
      - '9000:9000'
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms64M -Xmx128M"
    depends_on:
      kafka:
        condition: service_healthy

volumes:
  mongo-data:
  user-pgdata:
  orderdb-data:
